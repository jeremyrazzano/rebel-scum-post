#!/user/bin/env node

const app = require('../')
const debug = require('debug')('host:server')
const http = require('http')

const socketIO = require('../../socket')

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

const server = http.createServer(app)

socketIO.attach(server)

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

// functions
function normalizePort (val) {
  let port = parseInt(val, 10)
  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    return port
  }

  return false
}

// event-handlers
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated priviledges')
      process.exit(1)
      break
    case 'EADRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}

module.exports = server